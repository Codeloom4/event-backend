CREATE DATABASE ems_db;

-- Table: users
CREATE TABLE users (
    id VARCHAR(36) PRIMARY KEY,  -- Use VARCHAR(36) to store UUID
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    enabled BOOLEAN NOT NULL DEFAULT TRUE,
    account_non_expired BOOLEAN NOT NULL DEFAULT TRUE,
    credentials_non_expired BOOLEAN NOT NULL DEFAULT TRUE,
    account_non_locked BOOLEAN NOT NULL DEFAULT TRUE,
    force_password_change BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table: user_roles (Mapping between users and roles)
CREATE TABLE user_roles (
    user_id VARCHAR(36) NOT NULL,
    role_id BIGINT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, role_id)
);

-- Table: roles
CREATE TABLE roles (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE
);


INSERT INTO roles (name) VALUES
('ADMIN'),
('EMPLOYEE'),
('CLIENT');

INSERT INTO users (id, username, password, email, enabled, account_non_expired, credentials_non_expired, account_non_locked, force_password_change) VALUES
('A001', 'admin', '$2a$12$UT71LwajSuaNYdjScea7t.KJcVRA0CvwIsOPHbbLe8PHjzoGq1tUa', 'admin@example.com', TRUE, TRUE, TRUE, TRUE, FALSE),
('E001', 'employee', '$2a$12$UT71LwajSuaNYdjScea7t.KJcVRA0CvwIsOPHbbLe8PHjzoGq1tUa', 'employee@example.com', TRUE, TRUE, TRUE, TRUE,FALSE),
('C001', 'client', '$2a$12$UT71LwajSuaNYdjScea7t.KJcVRA0CvwIsOPHbbLe8PHjzoGq1tUa', 'client@example.com', TRUE, TRUE, TRUE, TRUE, FALSE);

-- Assign the ADMIN role to the first user
INSERT INTO user_roles (user_id, role_id) VALUES
((SELECT id FROM users WHERE username = 'admin'), (SELECT id FROM roles WHERE name = 'ADMIN'));

-- Assign the EMPLOYEE role to the second user
INSERT INTO user_roles (user_id, role_id) VALUES
((SELECT id FROM users WHERE username = 'employee'), (SELECT id FROM roles WHERE name = 'EMPLOYEE'));

-- Assign the CLIENT role to the third user
INSERT INTO user_roles (user_id, role_id) VALUES
((SELECT id FROM users WHERE username = 'client'), (SELECT id FROM roles WHERE name = 'CLIENT'));

-- Table: userpersonaldata
CREATE TABLE userpersonaldata (
    user_id VARCHAR(36) NOT NULL PRIMARY KEY,
    position VARCHAR(100) NOT NULL,
    mobile VARCHAR(100) NOT NULL,
    address TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Table: event_types
CREATE TABLE event_types (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table: venues
CREATE TABLE venues (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    location VARCHAR(255) NOT NULL,
    capacity INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table: inventory
CREATE TABLE `inventory` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `balance_qty` int NOT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `end_barcode` varchar(255) DEFAULT NULL,
  `is_refundable` bit(1) NOT NULL,
  `item_name` varchar(255) NOT NULL,
  `order_qty` int NOT NULL,
  `purchase_price` bigint NOT NULL,
  `sales_price` bigint NOT NULL,
  `sales_qty` int NOT NULL,
  `start_barcode` varchar(255) DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_user` varchar(50) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK2r2e8xs9dt2kjmw1scx3roso5` (`created_user`),
  CONSTRAINT `FK2r2e8xs9dt2kjmw1scx3roso5` FOREIGN KEY (`created_user`) REFERENCES `users` (`username`)
);

INSERT INTO `ems_db`.`package_type`
(`code`,`description`) VALUES
 ('B','Bronze'),
 ('S','Silver'),
 ('G','Gold');

-- Table: packages
CREATE TABLE packages (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    event_type_id BIGINT NOT NULL,
    description TEXT,
    price DECIMAL(10, 2) NOT NULL,
    created_by BIGINT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (event_type_id) REFERENCES event_types(id) ON DELETE CASCADE,
    FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE SET NULL
);

-- Table: package_items
CREATE TABLE package_items (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    package_id BIGINT NOT NULL,
    inventory_id BIGINT NOT NULL,
    quantity INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (package_id) REFERENCES packages(id) ON DELETE CASCADE,
    FOREIGN KEY (inventory_id) REFERENCES inventories(id) ON DELETE CASCADE
);

-- Table: orders
CREATE TABLE orders (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    customer_id BIGINT NOT NULL,
    package_id BIGINT NOT NULL,
    status ENUM('PENDING', 'APPROVED', 'REJECTED') NOT NULL DEFAULT 'PENDING',
    total_price DECIMAL(10, 2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES customers(id) ON DELETE CASCADE,
    FOREIGN KEY (package_id) REFERENCES packages(id) ON DELETE SET NULL
);

-- Table: order_customizations
CREATE TABLE order_customizations (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    order_id BIGINT NOT NULL,
    inventory_id BIGINT NOT NULL,
    quantity INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,
    FOREIGN KEY (inventory_id) REFERENCES inventories(id) ON DELETE CASCADE
);

-- Table: payments
CREATE TABLE payments (
    id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    amount DECIMAL(38,2) NOT NULL,
    currency VARCHAR(255) NOT NULL,
    payment_method VARCHAR(255) NOT NULL,
    file_path VARCHAR(255),
    created_at DATETIME NOT NULL,
    updated_at DATETIME NOT NULL
) ENGINE=InnoDB;

-- Table: Inventory
CREATE TABLE Inventory (
    id INT AUTO_INCREMENT PRIMARY KEY,
    item_name VARCHAR(255) NOT NULL,
    is_refundable BOOLEAN NOT NULL,
    purchase_price DECIMAL(20,2) NOT NULL,
    sales_price DECIMAL(10,2) NOT NULL,
    order_qty INT NOT NULL DEFAULT 0,
    sales_qty INT NOT NULL DEFAULT 0,
    balance_qty INT GENERATED ALWAYS AS (order_qty - sales_qty) STORED,
    start_Barcode VARCHAR(100) UNIQUE,
    end_Barcode VARCHAR(100) UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_user VARCHAR(100) NOT NULL,
    FOREIGN KEY (created_user) REFERENCES users(id) ON DELETE CASCADE
);


INSERT INTO districts (district_name) VALUES
('Ampara'),
('Anuradhapura'),
('Badulla'),
('Batticaloa'),
('Colombo'),
('Galle'),
('Gampaha'),
('Hambantota'),
('Jaffna'),
('Kalutara'),
('Kandy'),
('Kegalle'),
('Kilinochchi'),
('Kurunegala'),
('Mannar'),
('Matale'),
('Matara'),
('Monaragala'),
('Mullaitivu'),
('Nuwara Eliya'),
('Polonnaruwa'),
('Puttalam'),
('Ratnapura'),
('Trincomalee'),
('Vavuniya');

CREATE TABLE groupings (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    event_type VARCHAR(255) NOT NULL,
    event_name VARCHAR(255) NOT NULL,
    total_participants INT NOT NULL,
    number_of_groups INT,
    grouping_method VARCHAR(50) NOT NULL,
    file_path VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Status Table create

CREATE TABLE status (
    code VARCHAR(20) PRIMARY KEY,
    description VARCHAR(100) NOT NULL,
    type VARCHAR(50) NOT NULL
);

CREATE TABLE order_request (
    order_id VARCHAR(50) PRIMARY KEY,
    package_id VARCHAR(50) NOT NULL,
    cus_note TEXT NULL,
    total DECIMAL(10,2) NOT NULL,
    event_date DATE NOT NULL,
    requested_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    cus_username VARCHAR(20) NULL,
    lastupdated_datetime DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    order_status VARCHAR(20) NULL,
    payment_status VARCHAR(20) NULL,
    remark TEXT NULL,
    approved_user VARCHAR(20),
    FOREIGN KEY (package_id) REFERENCES package(id),
    FOREIGN KEY (order_status) REFERENCES status(code),
    FOREIGN KEY (payment_status) REFERENCES status(code)
);

CREATE TABLE order_request_detail (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id VARCHAR(50) NOT NULL,
    item_id BIGINT NULL,
    item_name VARCHAR(255) NULL,
    unit_price DECIMAL(10,2) NULL,
    quantity INT NULL,
    bulk_price DECIMAL(10,2) NULL,
    created_datetime DATETIME DEFAULT CURRENT_TIMESTAMP,
    cus_id VARCHAR(50) NULL,
    FOREIGN KEY (order_id) REFERENCES order_request(order_id),
    FOREIGN KEY (item_id) REFERENCES inventory_item(id)
);